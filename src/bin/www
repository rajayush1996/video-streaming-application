#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
// const debug = require('debug')('vsa:server');
const http = require('http');
const connectDB = require('../connection/db');
const logger = require('../features/logger');
const redisClient = require('../connection/redis.connection');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
logger.info(`port info of the server: ${port}`);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // Named pipe
        return val;
    }

    if (port >= 0) {
        // Port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // Handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
    case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

async function onListening() {
    try {
        const addr = server.address();
        const bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;

        logger.debug('Listening on ' + bind);
        logger.info(`Server is listening on ${bind}`);

        // Handle non-critical error for Config Service
        // try {
        // const configData = await fetchConfig();
        // configStore.setConfig(configData);
        // logger.info('Config fetched successfully from the Config Service', configData);
        // } catch (fetchErr) {
        //     // Log the error and proceed with default config or previous config
        //     logger.error('Error fetching config from Config Service:', fetch.message || fetchErr);
        //     // Set a default config or fallback config here if needed
        //     configStore.setConfig({ /* your default config */ });
        //     logger.warn('Using default configuration.');
        // }

        // Critical: Attempt to connect to the database
        try {
            await connectDB();
            logger.info('Database connection established successfully');
        } catch (dbErr) {
            logger.error('Database connection failed:', dbErr.message);
            process.exit(1);  // Exit if database connection fails
        }

        // Critical: Attempt to connect to Redis
        // try {
        //     if (!redisClient.isOpen) {
        //         await redisClient.connect();  // Ensure Redis is connected
        //         logger.info('Redis connection established successfully');
        //     }
        // } catch (redisErr) {
        //     logger.error('Redis connection failed:', redisErr.message);
        //     process.exit(1);  // Exit if Redis connection fails
        // }

    } catch (err) {
        // Handle any unexpected critical errors
        logger.error('Critical error occurred during server startup:', err.message);
        process.exit(1);  // Exit for any other unexpected critical error
    }
}